/*
 * jcc - A compiler framework.
 * Copyright (C) 2016-2017 Jacob Zhitomirsky
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef _JCC__JTAC__PARSE__PARSER__H_
#define _JCC__JTAC__PARSE__PARSER__H_

#include "jtac/parse/token.hpp"
#include "jtac/program.hpp"
#include "jtac/assembler.hpp"
#include <string>
#include <stdexcept>


namespace jcc {
namespace jtac {

  /*!
     \class parse_error
     \brief Thrown by the parse in case of failure.
   */
  class parse_error: public std::runtime_error
  {
    token_pos pos;

   public:
    inline token_pos get_pos () const { return this->pos; }

   public:
    parse_error (const std::string& str, token_pos pos)
        : std::runtime_error (str), pos (pos)
    { }
  };


  /*!
     \class parser
     \brief JTAC parser.

     The parser takes the token stream generated by a lexer and outputs a JTAC
     program as its result.
   */
  class parser
  {
    token_stream& toks;
    program prog;

    procedure *curr_proc;
    assembler asem;
    jtac_var_id next_var_id;
    jtac_name_id next_name_id;
    std::unordered_map<std::string, jtac_label_id> label_map;

   public:
    parser (token_stream& toks);

   public:
    /*!
       \brief Parses the underlying token stream and returns a JTAC program.
     */
    program parse ();

   private:
    void parse_top_level ();
    void parse_proc ();
    void parse_instruction ();
    void parse_assign_instruction ();

    jtac_tagged_operand parse_operand ();
    jtac_tagged_operand parse_name_operand ();

    //! \brief Returns a token of the specified type or raises an exception.
    token expect (token_type type);

    //! \brief Raises an exception in case of EOF.
    void check_eof ();
  };
}
}

#endif //_JCC__JTAC__PARSE__PARSER__H_
